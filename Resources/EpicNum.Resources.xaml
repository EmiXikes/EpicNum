<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:EpicNum.Resources">


  <Style x:Key="Epic.Controls.Buttons.Up" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
    <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">

          <Border x:Name="border"
        BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" BorderBrush="{DynamicResource Epic.Colors.Accent.Mix.1.Normal}" Background="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/IMG.Epic.Sign.Up.png"/>
            </Border.OpacityMask>
            <ContentPresenter x:Name="contentPresenter" Focusable="False"
          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
          Margin="{TemplateBinding Padding}"
          RecognizesAccessKey="True"
          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
          TextElement.Foreground ="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"
                                          />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="BorderBrush" TargetName="border"
                      Value="{DynamicResource Epic.Colors.BackGround.Disabled}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                      Value="{DynamicResource Epic.Colors.BackGround.Disabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Epic.Controls.Buttons.Down" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
    <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">

          <Border x:Name="border"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" Background="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/IMG.Epic.Sign.Down.png"/>
            </Border.OpacityMask>
            <ContentPresenter x:Name="contentPresenter" Focusable="False"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                Margin="{TemplateBinding Padding}"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                TextElement.Foreground ="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"
                                          />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="border"
                      Value="{DynamicResource Epic.Colors.BackGround.Disabled}"/>
              <Setter Property="BorderBrush" TargetName="border"
                      Value="{DynamicResource Epic.Colors.BackGround.Disabled}"/>
              <Setter Property="TextElement.Foreground" TargetName="contentPresenter"
                      Value="{DynamicResource Epic.Colors.BackGround.Disabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Variant.0}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="0"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True" VerticalAlignment="Center">
            <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                HorizontalScrollBarVisibility="Hidden"
                VerticalScrollBarVisibility="Hidden"
                          VerticalAlignment="Center" HorizontalAlignment="Center"
                          Template="{DynamicResource ScrollViewerControlTemplate1}"
                                      
                                      />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Selected}"/>
              <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedPress}"/>
              <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Variant.2}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="NumAdderToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="border"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="true" Margin="0" Background="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/add.png" Stretch="Uniform">
                <ImageBrush.RelativeTransform>
                  <TransformGroup>
                    <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="1.2" ScaleY="1.2"/>
                    <SkewTransform CenterY="0.5" CenterX="0.5"/>
                    <RotateTransform CenterY="0.5" CenterX="0.5"/>
                    <TranslateTransform/>
                  </TransformGroup>
                </ImageBrush.RelativeTransform>
              </ImageBrush>
            </Border.OpacityMask>
            <Grid Margin="0">
              <ContentPresenter x:Name="contentPresenter" Focusable="False"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  Margin="{TemplateBinding Padding}"
                  RecognizesAccessKey="True"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            </Grid>


          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border"
                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Selected}"/>
              <!--<Setter Property="OpacityMask" TargetName="border">
                                        <Setter.Value>
                                            -->
              <!--Checked Icon-->
              <!--
                                            <ImageBrush ImageSource="{DynamicResource Epic.Images.Controls.Checkbox.Checked}"/>
                                        </Setter.Value>
                                    </Setter>-->

            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedHover}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedPress}"/>
            </MultiTrigger>


            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Disabled}"/>

            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NumNodeResetToggleButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="border"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="true" Margin="0" Background="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/playback_reload_icon&amp;48.png">
                <ImageBrush.RelativeTransform>
                  <TransformGroup>
                    <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.8" ScaleY="0.8"/>
                    <SkewTransform CenterY="0.5" CenterX="0.5"/>
                    <RotateTransform CenterY="0.5" CenterX="0.5"/>
                    <TranslateTransform/>
                  </TransformGroup>
                </ImageBrush.RelativeTransform>
              </ImageBrush>
            </Border.OpacityMask>
            <Grid Margin="0">
              <ContentPresenter x:Name="contentPresenter" Focusable="False"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  Margin="{TemplateBinding Padding}"
                  RecognizesAccessKey="True"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            </Grid>


          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border"
                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Selected}"/>
              <!--<Setter Property="OpacityMask" TargetName="border">
                                        <Setter.Value>
                                            -->
              <!--Checked Icon-->
              <!--
                                            <ImageBrush ImageSource="{DynamicResource Epic.Images.Controls.Checkbox.Checked}"/>
                                        </Setter.Value>
                                    </Setter>-->

            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedHover}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedPress}"/>
            </MultiTrigger>


            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Disabled}"/>

            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NumNodeCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/round_close_icon.png"/>
            </Border.OpacityMask>

            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Disabled}"/>

            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NumNodePadToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="border"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="true" Margin="0" Background="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}">
            <Border.OpacityMask>
              <ImageBrush ImageSource="/EpicNum;component/Resources/IMG/pad3.png">
                <ImageBrush.RelativeTransform>
                  <TransformGroup>
                    <ScaleTransform CenterY="0.5" CenterX="0.5" ScaleX="0.9" ScaleY="1.2"/>
                    <SkewTransform CenterY="0.5" CenterX="0.5"/>
                    <RotateTransform CenterY="0.5" CenterX="0.5"/>
                    <TranslateTransform/>
                  </TransformGroup>
                </ImageBrush.RelativeTransform>
              </ImageBrush>
            </Border.OpacityMask>
            <Grid Margin="0">
              <ContentPresenter x:Name="contentPresenter" Focusable="False"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  Margin="{TemplateBinding Padding}"
                  RecognizesAccessKey="True"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

            </Grid>


          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="true">
              <Setter Property="BorderBrush" TargetName="border"
                  Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>

            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Selected}"/>
              <!--<Setter Property="OpacityMask" TargetName="border">
                                        <Setter.Value>
                                            -->
              <!--Checked Icon-->
              <!--
                                            <ImageBrush ImageSource="{DynamicResource Epic.Images.Controls.Checkbox.Checked}"/>
                                        </Setter.Value>
                                    </Setter>-->

            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsMouseOver" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedHover}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="true"/>
                <Condition Property="IsPressed" Value="true"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.SelectedPress}"/>
            </MultiTrigger>


            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="border"
                  Value="{DynamicResource Epic.Colors.Accent.Mix.0.Disabled}"/>

            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ScrollViewerControlTemplate1" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}">

      <Rectangle x:Name="Corner" Grid.Column="0" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"  VerticalAlignment="Center"/>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}"
                              CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"  VerticalAlignment="Center" HorizontalAlignment="Center"/>

    </Grid>
  </ControlTemplate>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
  <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
  <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
  <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
  <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
  <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
  <Style x:Key="ListBoxItemStyle_Test" TargetType="{x:Type ListBoxItem}">
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Padding" Value="3,3,3,2"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>-->
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>-->
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <!--<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>-->
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
    <Style x:Key="AddNodeButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
        <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                      BorderBrush="{TemplateBinding BorderBrush}" 
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="7"      
                      Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          Margin="{TemplateBinding Padding}" 
                          RecognizesAccessKey="True"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          TextElement.Foreground ="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Content.Disabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.Content.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EpicNumStartButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource EpicFocusStyle}"/>
        <Setter Property="Background" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
        <Setter Property="Foreground" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="border"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="2"
                        CornerRadius="7"      
                        Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}" 
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            TextElement.Foreground ="{DynamicResource Epic.Colors.Accent.Mix.0.Normal}"
                                          />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Hover}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Accent.Mix.0.Pressed}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.BackGround.Normal}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Epic.Colors.Content.Disabled}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource Epic.Colors.Content.Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>